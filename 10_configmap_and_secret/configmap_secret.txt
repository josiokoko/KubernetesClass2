=========================================
ConfigMap and Secret
========================================


Configuration Data
====================
- Injecting configuration data into runtime environment
- Allows:
	- build once and use everywhere concept
	- prevents accidental mistatkes across runtime environment

- Options for injecting configuration data:
	- Environment variables in your Pod's YAML manifest
		env:

	- Kubernetes Objects:
		- ConfigMap
		- Secret





====================================================
Environment variables:
====================================================	
- A Pod:
	memcached:1.6.8

	environment variables:
		MEMCACHED_CONNECTIONS=2048

			name: MEMCACHED_CONNECTIONS
			value: 2048

		MEMCACHED_THREADS=150
		USERNAME=john




===================================================
ConfigMap
===================================================
	- Stores key-value pairs
	- ConfigMap key-value pairs can be consumed as:
		- Environment variables
		- Volume


===================================================
Secret (k8s object):
===================================================
- Similar to ConfigMap
- Stores set of key-value pairs
- Better suited for a small amount of sensitive data 
	- password
	- API keys
	- SSL certificate
	- ssh key 
	- a token
- Stores values encoded in Base64
- Note:
	- Base64 only encodes a value
	- Base64 does not encrypt a value





Example: Consider a postgres database:
	Which of the following configuration data is suitable for ConfigMap and Secret?
		- username (secret)
		- password (secret)
		- db_name (configmap)
		- db_port (configmap)




====================================================
Create and Consume ConfigMap
====================================================
(1) Creating both declaratively and imperatively:
	Imperative 
		--from-literal => create from literal key/value pair
		--from-env-file
		--from-file

		(1) kubectl create configmap db-config --from-literal=DB_HOST=mysql_db_host --from-literal=DB_USER=raycoy	
		(2) kubectl create cm env-config --from-env-file=cmfile.env
		(3) kubectl create cm testconfig --from-file=confighistory.txt


	Declarative => check configmap.yaml manifest file

=============
TO DO: Look into these concepts:
	- Resource requests and limits; QoS: Quality of Service (Best Effort, Gurantee; or Bustable)
	- Resource Quota 
	- NetworkPolicy
=============

(2) Consuming a ConfigMap:
	(a) As environment variables:
		envFrom:
			- configMapRef:
				name: db-config

	(b) key-value pair does not conform to naming convention:
		env:
		- name: DB_URL
		  valueFrom:
			configMapRef:
				name: db-config2
				key: database_url
		- name: USERNAME
		  valueFrom:
			configMapRef:
				name: db-config2
				key: database_user

	(c) As a Volume:

		Spec:
			volumes:
				- name: db-config-vol
				  configMap:
					name: db-config

			containers:
				volumeMounts:
					- name: db-config-vol
					  mountPath: /etc/config 

		Create your configmap object
		create your workload to consume configmap object
		check the configuration data:
			kubectl exec -it <pod name> -- sh 
			#> env 
			#> printenv


=====================================================
Create and Consume Secret
=====================================================

Multiple options for creating a Secret, including:
 	- opaque => arbitrary user-defined data
 	- tls
 	- docker-registry
	- kubernetes.io/service-account-token
	- kubernetes.io/basic-auth


Creating Secret:
	
	(1) Imperatively:
		kubectl create secret generic creds --from-literal=user=raycoy --from-literal=password=supersecret123

		kubectl create secret generic sshkey --from-file=/c/Users/lucya/.ssh/id_rsa

		- inspect the secret:
			kubectl get secret creds -o yaml
	
	(2) Declaratively:
		check secret.yaml manifest

		Make sure your data value is base64 encoded
			echo 'raycoy' | base64
			echo 'supersecret123' | base64

		kubectl apply -f secret1.yaml
		kubectl apply -f nginx-pod-secret-vol.yaml

		kubectl exec -it secret-pod -- sh
		#> ls /etc/config

	(3) Avoid Base64 encoding:
		- Use Secret type kubernetes.io/basic-auth
		- stringData instead of data
		- check secret3.yaml file		